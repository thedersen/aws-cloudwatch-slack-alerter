AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Configures automatic LogGroup subscription to a Slack Alerter Lambda

Parameters:
  SlackWebhookUrl:
    Type: String
    Description: The url for the Slack webhooks to where to post events
  SubscriptionRegex:
    Type: String
    Description: RegEx filter to test all log groups against before subscribing
    Default: .*[Pp]roduction.*
  NotionKey:
    Type: String
    Description: The API key for Notion
  NotionClientsDB:
    Type: String
    Description: The ID for the Notion DB where to look up clients by AWS Account
  NotionTasksDB:
    Type: String
    Description: The ID for the Notion DB where to post errors

Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Handler: index.handler
    Runtime: nodejs18.x
    Architectures:
      - arm64

Resources:
  SlackAlerter:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/slack-alerter
      Role: !GetAtt SlackAlerterRole.Arn
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
          NOTION_KEY: !Ref NotionKey
          NOTION_CLIENTS_DB: !Ref NotionClientsDB
          NOTION_TASKS_DB: !Ref NotionTasksDB
  SlackAlerterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: SlackAlerterPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
  SlackAlerterCloudwatchPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SlackAlerter
      Principal: logs.amazonaws.com
  Subscriber:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/subscriber
      Role: !GetAtt SubscriberRole.Arn
      Environment:
        Variables:
          ALERTER_ARN: !GetAtt SlackAlerter.Arn
          SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
          SUBSCRIPTION_REGEX: !Ref SubscriptionRegex
      Events:
        CloudWatchEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              detail:
                eventSource:
                  - logs.amazonaws.com
                eventName:
                  - CreateLogGroup
  SubscriberRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: SlackAlerterPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:PutSubscriptionFilter
            Resource: arn:aws:logs:*:*:*
  SlackAlerterTester:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SlackAlerter-SlackAlerterTesterProduction
      CodeUri: ./src/tester
      Timeout: 2
Outputs:
  AlerterArn:
    Value: !GetAtt SlackAlerter.Arn
